{"version":3,"sources":["components/Login/Login.jsx","App.js","reportWebVitals.js","index.js"],"names":["Login","validationSchema","yup","email","max","trim","required","password","min","formik","useFormik","initialValues","onSubmit","values","alert","JSON","stringify","Box","className","Paper","elevation","sx","m","handleSubmit","Typography","variant","TextField","mt","fullWidth","type","label","placeholder","name","value","onChange","handleChange","error","touched","Boolean","errors","helperText","my","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TA+EeA,MArEf,WAKE,IAAMC,EAAmBC,IAAW,CAClCC,MAAOD,IACG,oBACPE,IAAI,GAAI,4CACRD,MAAM,uBACNE,KAAK,sCAELC,SAAS,qBACZC,SAAUL,IACA,uBACPM,IAAI,EAAG,wCACPJ,IAAI,GAAI,+CACRC,KAAK,sCACLC,SAAS,0BAGRG,EAASC,YAAU,CACvBT,iBAAkBA,EAClBU,cAAe,CACbR,MAAO,GACPI,SAAU,IAEZK,SA1BF,SAA0BC,GACxBC,MAAMC,KAAKC,UAAUH,OA2BvB,OACE,8BACE,cAACI,EAAA,EAAD,CAAKC,UAAU,YAAf,SACE,cAACC,EAAA,EAAD,CAAOD,UAAU,cAAcE,UAAW,EAA1C,SACE,uBAAMC,GAAI,CAAEC,EAAG,GAAKV,SAAUH,EAAOc,aAArC,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,mBACA,cAACC,EAAA,EAAD,CACEL,GAAI,CAAEM,GAAI,GACVC,WAAS,EACTC,KAAK,QACLC,MAAM,QACNC,YAAY,kBACZC,KAAK,QACLC,MAAOxB,EAAOI,OAAOV,MACrB+B,SAAUzB,EAAO0B,aACjBC,MAAO3B,EAAO4B,QAAQlC,OAASmC,QAAQ7B,EAAO8B,OAAOpC,OACrDqC,WAAY/B,EAAO4B,QAAQlC,OAASM,EAAO8B,OAAOpC,QAEpD,cAACuB,EAAA,EAAD,CACEE,WAAS,EACTC,KAAK,WACLC,MAAM,WACNC,YAAY,qBACZV,GAAI,CAAEoB,GAAI,GACVT,KAAK,WACLC,MAAOxB,EAAOI,OAAON,SACrB2B,SAAUzB,EAAO0B,aACjBC,MAAO3B,EAAO4B,QAAQ9B,UAAY+B,QAAQ7B,EAAO8B,OAAOhC,UACxDiC,WAAY/B,EAAO4B,QAAQ9B,UAAYE,EAAO8B,OAAOhC,WAEvD,cAACmC,EAAA,EAAD,CAAQb,KAAK,SAASJ,QAAQ,YAA9B,8BC1DGkB,MARf,WACE,OACC,8BACE,cAAC,EAAD,OCMUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.383ff1d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport \"./Login.css\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { Box } from \"@mui/system\";\r\nimport { Paper } from \"@mui/material\";\r\n\r\nfunction Login() {\r\n  function onSubmitFunction(values) {\r\n    alert(JSON.stringify(values));\r\n  }\r\n\r\n  const validationSchema = yup.object({\r\n    email: yup\r\n      .string(\"Enter your email\")\r\n      .max(40, \"Email can be at least 40 characters long\")\r\n      .email(\"Enter a valid email\")\r\n      .trim(\"There should not be a single space\")\r\n      //   .matches(/([_\\-\\.a-zA-Z0-9])/,\"There is an irrelevant character\")\r\n      .required(\"Email is required\"),\r\n    password: yup\r\n      .string(\"Enter your password\")\r\n      .min(8, \"Password should be 8 characters long\")\r\n      .max(17, \"Password can not be more then 17 characters\")\r\n      .trim(\"There should not be a single space\")\r\n      .required(\"Password is required\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    validationSchema: validationSchema,\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: onSubmitFunction,\r\n  });\r\n  return (\r\n    <div>\r\n      <Box className=\"parentBox\">\r\n        <Paper className=\"parentPaper\" elevation={3}>\r\n          <form sx={{ m: 4 }} onSubmit={formik.handleSubmit}>\r\n            <Typography variant=\"h4\">Login</Typography>\r\n            <TextField\r\n              sx={{ mt: 2 }}\r\n              fullWidth\r\n              type=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"Type Your Email\"\r\n              name=\"email\"\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.email && Boolean(formik.errors.email)}\r\n              helperText={formik.touched.email && formik.errors.email}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              placeholder=\"Type Your Password\"\r\n              sx={{ my: 2 }}\r\n              name=\"password\"\r\n              value={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.password && Boolean(formik.errors.password)}\r\n              helperText={formik.touched.password && formik.errors.password}\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\">\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </Paper>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import './App.css';\r\nimport Login from './components/Login/Login';\r\n\r\nfunction App() {\r\n  return (\r\n   <div>\r\n     <Login/>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}